[0m-------------------------------------------------------------------------------
[1;34;40m                          [93mBubulle Code Norme Report v1.16b
[0mPath: [93mc_tests2/
[0m-------------------------------------------------------------------------------
[1;34;40mFile                 Error   Line    Severity   Details
[0m-------------------------------------------------------------------------------[1;34;00m
[37mmain.c[37m               O4[37m          [0m    [0;30;41m MAJOR [0m    [37mFile name not clear enough
[0mmain.c[0m               G1[0m          [0m    [0;30;41m MAJOR [0m    [0mEPITECH header misplaced/missing
[Decl(name='bedo',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='bedo',
                   quals=[
                         ],
                   type=IdentifierType(names=['int'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='0'
                   ),
     bitsize=None
     ), If(cond=ID(name='bedo'
           ),
   iftrue=Compound(block_items=[If(cond=BinaryOp(op='==',
                                                 left=ID(name='bedo'
                                                         ),
                                                 right=Constant(type='int',
                                                                value='2'
                                                                )
                                                 ),
                                   iftrue=Compound(block_items=[Return(expr=Constant(type='int',
                                                                                     value='1'
                                                                                     )
                                                                       )
                                                               ]
                                                   ),
                                   iffalse=If(cond=BinaryOp(op='==',
                                                            left=ID(name='bedo'
                                                                    ),
                                                            right=Constant(type='int',
                                                                           value='3'
                                                                           )
                                                            ),
                                              iftrue=Compound(block_items=[Assignment(op='=',
                                                                                      lvalue=ID(name='bedo'
                                                                                                ),
                                                                                      rvalue=Constant(type='int',
                                                                                                      value='4'
                                                                                                      )
                                                                                      )
                                                                          ]
                                                              ),
                                              iffalse=None
                                              )
                                   )
                               ]
                   ),
   iffalse=None
   ), Return(expr=ID(name='bedo'
               )
       )]
-------------------------------------------------------------------------------
<class 'pycparser.c_ast.Decl'> | <class 'NoneType'> => a
-------------------------------------------------------------------------------
<class 'pycparser.c_ast.If'> | <class 'NoneType'> => a
-------------------------------------------------------------------------------
<class 'pycparser.c_ast.Compound'> | <class 'pycparser.c_ast.If'> => b
-------------------------------------------------------------------------------
<class 'pycparser.c_ast.If'> | <class 'pycparser.c_ast.If'> => c
-------------------------------------------------------------------------------
<class 'pycparser.c_ast.Compound'> | <class 'pycparser.c_ast.If'> => b
-------------------------------------------------------------------------------
<class 'pycparser.c_ast.Return'> | <class 'pycparser.c_ast.If'> => c
<class 'pycparser.c_ast.Compound'>
-------------------------------------------------------------------------------
<class 'pycparser.c_ast.If'> | <class 'pycparser.c_ast.If'> => b
-------------------------------------------------------------------------------
<class 'pycparser.c_ast.Compound'> | <class 'pycparser.c_ast.If'> => b
-------------------------------------------------------------------------------
<class 'pycparser.c_ast.Assignment'> | <class 'pycparser.c_ast.If'> => c
<class 'pycparser.c_ast.Compound'>
[37mmain.c[37m               L2[37m      [0;30;43m 8 [0m     [0;30;43m MINOR [0m     [37mIndentation must be 16 spaces but it's 12 [            bedo = 4;]
-------------------------------------------------------------------------------
<class 'pycparser.c_ast.Return'> | <class 'NoneType'> => a
[0m-------------------------------------------------------------------------------
[1;34;40mTOTAL[0m          Major: [93m2[0m       Minor: [32m1[0m       Info: [32m0[0m      Note: -7
[0m-------------------------------------------------------------------------------
[0mBubulle is up to date. Executed in 0.06s
